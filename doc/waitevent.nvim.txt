*waitevent.nvim.txt*

==============================================================================
Lua module: waitevent                               *waitevent.nvim-waitevent*

editor({opts})                                            *waitevent.editor()*
  Returns executable string to use EDITOR environment variable.
  This executable string uses current opened neovim as editor.
  if done_events and cancel_events are empty, the EDITOR process finishes as soon as open file.
  Otherwise, the process waits firing autocmd that be defined done_events or cancel_events.
  This can use with :terminal or jobstart() or vim.loop.spawn() .

  Parameters: ~
    {opts} (WaiteventEditorOption?) |WaiteventEditorOption|

  Return: ~
    (string) to use EDITOR

==============================================================================
STRUCTURE                                           *waitevent.nvim-STRUCTURE*

WaiteventOpenContext                                    *WaiteventOpenContext*

- {working_dir} (string) EDITOR process working directory
- {lcd} (fun()) function to change window local directory with working_dir

WaiteventEditorOption                                  *WaiteventEditorOption*

- {open} (fun(ctx:WaiteventOpenContext,...:string)) function that be called to open files
- {done_events} (string[]) autocmd events that treated as done
- {on_done} (fun(ctx:WaiteventContext)) function that called on done editor. |WaiteventContext|
- {cancel_events} (string[]) autocmd events that treated as cancel
- {on_canceled} (fun(ctx:WaiteventContext)) function that called on canceled editor. |WaiteventContext|

WaiteventContext                                            *WaiteventContext*

- {window_id_before_open} (integer) |window-ID| before |WaiteventEditorOption|.open
- {window_id_after_open} (integer) |window-ID| after |WaiteventEditorOption|.open
- {autocmd} (table) |nvim_create_autocmd()| callback argument

==============================================================================
EXAMPLES                                             *waitevent.nvim-EXAMPLES*

>
  -- Use for git command editor.
  -- This editor finishes the process on save or close.
  vim.env.GIT_EDITOR = require("waitevent").editor({
    open = function(ctx, path)
      vim.cmd.split(path)
      ctx.lcd()
      vim.bo.bufhidden = "wipe"
    end,
  })

  -- Use for `nvim {file_path}` in :terminal.
  -- This editor finishes the process as soon as open.
  -- The fowllowing shell settings is convinient (optional).
  -- `export EDITOR=nvim` in .bash_profile
  -- `alias nvim="${EDITOR}"` in .bashrc
  vim.env.EDITOR = require("waitevent").editor({
    done_events = {},
    cancel_events = {},
  })

  -- all default options
  local default = {
    open = function(ctx, ...)
      local paths = { ... }
      for _, path in ipairs(paths) do
        vim.cmd.tabedit(path)
        ctx.lcd()
        vim.bo.bufhidden = "wipe"
      end
      if #paths == 0 then
        vim.cmd.tabedit()
        ctx.lcd()
      end
    end,

    done_events = {
      "BufWritePost",
    },
    on_done = function(ctx)
      if vim.api.nvim_win_is_valid(ctx.window_id_after_open) and #vim.api.nvim_list_wins() > 1 then
        vim.api.nvim_win_close(ctx.window_id_after_open, true)
      end
      if not vim.api.nvim_win_is_valid(ctx.window_id_before_open) then
        return
      end
      vim.api.nvim_set_current_win(ctx.window_id_before_open)
    end,

    cancel_events = {
      "BufUnload",
      "BufDelete",
      "BufWipeout",
    },
    on_canceled = function(ctx)
      if not vim.api.nvim_win_is_valid(ctx.window_id_before_open) then
        return
      end
      vim.api.nvim_set_current_win(ctx.window_id_before_open)
    end,
  }
  require("waitevent").editor(default)
<

==============================================================================
vim:tw=78:ts=8:ft=help
